package net.nooj4nlp.gui.actions.shells.control;

import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;
import javax.swing.text.JTextComponent;

import net.nooj4nlp.controller.CorpusEditorShell.ExportColoredToHtmlActionListener;
import net.nooj4nlp.controller.CorpusEditorShell.ExportXmlActionListener;
import net.nooj4nlp.controller.LocateDialog.LocateDialogTextActionListener;
import net.nooj4nlp.controller.TextEditorShell.TextEditorShellController;
import net.nooj4nlp.controller.TextEditorShell.TextLinguisticAnalysisActionListener;
import net.nooj4nlp.gui.actions.documents.CopyActionListener;
import net.nooj4nlp.gui.actions.documents.CutActionListener;
import net.nooj4nlp.gui.actions.documents.PasteActionListener;
import net.nooj4nlp.gui.actions.documents.SelectAllActionListener;
import net.nooj4nlp.gui.actions.shells.modify.ModifyTextActionListener;
import net.nooj4nlp.gui.main.Launcher;

/**
 * 
 * InternalFrameListener that adds a TEXT menu to the menu bar each time a text editor is activated, and removes it
 * whenever the editor loses focus
 * 
 */
public class TextCommandInternalFrameListener implements InternalFrameListener
{

	private JTextComponent text;
	private JMenuItem mntmCut;
	private JMenuItem mntmCopy;
	private JMenuItem mntmPaste;
	private JMenuItem mntmSelectAll;
	private JMenuItem mntmLinguisticAnalysis;
	private JMenuItem mntmLocate;
	private JMenuItem mntmExportAnnotatedTexts;
	private JMenuItem mntmExportColoredTexts;

	private JMenuItem mntmModify;

	private JMenuBar menuBar;
	private static JMenu mnText;

	private TextEditorShellController controller;

	private TextLinguisticAnalysisActionListener textLinguisticAnalysisActionListener;

	public TextCommandInternalFrameListener(JTextComponent tc, TextEditorShellController controller)
	{
		text = tc;
		this.controller = controller;
	}

	@Override
	public void internalFrameActivated(InternalFrameEvent e)
	{
		mntmCut = Launcher.getTextCommands().get("Cut");
		mntmCopy = Launcher.getTextCommands().get("Copy");
		mntmPaste = Launcher.getTextCommands().get("Paste");
		mntmSelectAll = Launcher.getTextCommands().get("Select All");

		// Add cut/copy/paste functionality to the current component
		mntmCut.addActionListener(new CutActionListener(text));
		mntmCopy.addActionListener(new CopyActionListener(text));
		mntmPaste.addActionListener(new PasteActionListener(text));
		mntmSelectAll.addActionListener(new SelectAllActionListener(text));

		menuBar = Launcher.getMenuBar();
		mnText = new JMenu("TEXT");
		mnText.setVisible(true);
		menuBar.add(mnText);

		mntmLinguisticAnalysis = new JMenuItem("Linguistic Analysis");
		mnText.add(mntmLinguisticAnalysis);
		textLinguisticAnalysisActionListener = new TextLinguisticAnalysisActionListener(controller);
		mntmLinguisticAnalysis.addActionListener(textLinguisticAnalysisActionListener);

		mntmLocate = new JMenuItem("Locate");
		mnText.add(mntmLocate);
		mntmLocate.addActionListener(new LocateDialogTextActionListener(controller, null));

		JSeparator separator_1 = new JSeparator();
		mnText.add(separator_1);

		mntmExportColoredTexts = new JMenuItem("Export colored text as an HTML document");
		mnText.add(mntmExportColoredTexts);
		mntmExportColoredTexts.setEnabled(controller.isColored());
		mntmExportColoredTexts.addActionListener(new ExportColoredToHtmlActionListener(null, controller));

		mntmExportAnnotatedTexts = new JMenuItem("Export annotated text as an XML document");
		mnText.add(mntmExportAnnotatedTexts);
		mntmExportAnnotatedTexts.addActionListener(new ExportXmlActionListener(controller));

		JSeparator separator_2 = new JSeparator();
		mnText.add(separator_2);

		mntmModify = new JMenuItem("Modify Text");
		mnText.add(mntmModify);
		mntmModify.addActionListener(new ModifyTextActionListener(controller));
	}

	@Override
	public void internalFrameClosed(InternalFrameEvent e)
	{
	}

	@Override
	public void internalFrameClosing(InternalFrameEvent e)
	{
	}

	@Override
	public void internalFrameDeactivated(InternalFrameEvent e)
	{
		// Clear previous component action listeners
		mntmCut.removeActionListener(mntmCut.getActionListeners()[0]);
		mntmCopy.removeActionListener(mntmCopy.getActionListeners()[0]);
		mntmPaste.removeActionListener(mntmPaste.getActionListeners()[0]);
		mntmSelectAll.removeActionListener(mntmSelectAll.getActionListeners()[0]);

		mntmLinguisticAnalysis.removeActionListener(mntmLinguisticAnalysis.getActionListeners()[0]);
		mntmLocate.removeActionListener(mntmLocate.getActionListeners()[0]);
		mntmExportColoredTexts.removeActionListener(mntmExportColoredTexts.getActionListeners()[0]);
		mntmExportAnnotatedTexts.removeActionListener(mntmExportAnnotatedTexts.getActionListeners()[0]);

		menuBar.remove(mnText);
		menuBar.repaint();
	}

	@Override
	public void internalFrameDeiconified(InternalFrameEvent e)
	{
	}

	@Override
	public void internalFrameIconified(InternalFrameEvent e)
	{
	}

	@Override
	public void internalFrameOpened(InternalFrameEvent e)
	{
	}

	public static JMenu getMnText()
	{
		return mnText;
	}

	public TextLinguisticAnalysisActionListener getTextLinguisticAnalysisActionListener()
	{
		return textLinguisticAnalysisActionListener;
	}
}
